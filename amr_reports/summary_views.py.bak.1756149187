from datetime import date
from django.db.models import Count, Q
from django.http import JsonResponse
from django.views.decorators.http import require_GET
from django.utils.dateparse import parse_date

try:
    # Django 4+: use functions from django.db.models.functions
    from django.db.models.functions import TruncMonth
except Exception:
    TruncMonth = None

from .models import LabResult  # adjust if your model is named differently

def _filtered_qs(request):
    qs = LabResult.objects.all()
    organism = request.GET.get('organism') or ''
    antibiotic = request.GET.get('antibiotic') or ''
    specimen = request.GET.get('specimen_type') or ''
    date_from = parse_date(request.GET.get('date_from') or '') or None
    date_to = parse_date(request.GET.get('date_to') or '') or None

    if organism:
        qs = qs.filter(organism__iexact=organism)
    if antibiotic:
        qs = qs.filter(antibiotic__iexact=antibiotic)
    if specimen:
        qs = qs.filter(specimen_type__iexact=specimen)
    if date_from:
        qs = qs.filter(test_date__gte=date_from)
    if date_to:
        qs = qs.filter(test_date__lte=date_to)
    return qs

@require_GET
def summary_counts(request):
    qs = _filtered_qs(request)
    total = qs.count()
    unique_patients = qs.values('patient_id').distinct().count()
    organisms = qs.values('organism').distinct().count()
    antibiotics = qs.values('antibiotic').distinct().count()
    return JsonResponse({
        "total_results": total,
        "unique_patients": unique_patients,
        "organisms": organisms,
        "antibiotics": antibiotics
    })

@require_GET
def top_organisms(request):
    qs = _filtered_qs(request)
    data = (qs.values('organism')
              .annotate(n=Count('id'))
              .order_by('-n')[:10])
    return JsonResponse(list(data), safe=False)

@require_GET
def antibiogram(request):
    """
    Returns bug-drug susceptibility breakdown:
    [
      {"organism":"E.coli", "antibiotic":"Ciprofloxacin", "S": 12, "I": 3, "R": 20},
      ...
    ]
    """
    qs = _filtered_qs(request)
    rows = (qs.values('organism', 'antibiotic')
              .annotate(
                 S=Count('id', filter=Q(ast_result__iexact='S')),
                 I=Count('id', filter=Q(ast_result__iexact='I')),
                 R=Count('id', filter=Q(ast_result__iexact='R')),
              )
              .order_by('organism','antibiotic'))
    return JsonResponse(list(rows), safe=False)

@require_GET
def trends_monthly(request):
    """
    Monthly percent resistant for a given organism+antibiotic (or overall if not provided).
    Returns: [{"month":"2025-01", "n": 23, "r": 9, "pctR": 39.13}, ...]
    """
    qs = _filtered_qs(request)
    if TruncMonth is None:
        return JsonResponse({"error": "TruncMonth not available in this Django version"}, status=400)

    agg = (qs
           .annotate(month=TruncMonth('test_date'))
           .values('month', 'organism', 'antibiotic')
           .annotate(
               n=Count('id'),
               r=Count('id', filter=Q(ast_result__iexact='R'))
           )
           .order_by('month'))

    # If user specified organism/antibiotic, keep percent for that; else overall
    # Compute percent R
    out = []
    for row in agg:
        n = row['n'] or 0
        r = row['r'] or 0
        pct = round((r / n) * 100, 2) if n else 0
        out.append({
            "month": row['month'].strftime("%Y-%m") if row['month'] else None,
            "organism": row['organism'],
            "antibiotic": row['antibiotic'],
            "n": n,
            "r": r,
            "pctR": pct
        })
    return JsonResponse(out, safe=False)
